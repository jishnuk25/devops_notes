CI

SCM-->Checkout-->Build the image(docker)-->Code quality scan(sonar qube)-->Security scan(veracode)-->Puhs the image to registry(Docker hub)

CD 

Pull the image from rgistry(Docker hub)-->Deploy to Env(any)-->Sanity test(Selenium/Jmeter/Post-man)


useful links

Deploy on Kubernetes Using Git, Jenkins, Ansible | Simple DevOps Project -5

https://github.com/yankils/Simple-DevOps-Project/


https://www.betsol.com/blog/devops-using-jenkins-docker-and-kubernetes/


https://www.tutorialworks.com/devops-project-ideas/


projct 1

Create a Git repository to store your work
Create (provision) a virtual machine (VirtualBox, Vagrant, etc.)
Research and choose a web server and install it on the virtual machine
Configure the web server to serve a static website (e.g. some basic HTML)
Make sure you can access the website in your web browser

project 2

Research and choose a CI/CD tool. You’ll want either a SaaS CI/CD service with a free tier you can use for learning, or a self-hosted tool. If you choose self-hosted, you’ll need to deploy the tool (extra credits if you do this!)
Find a project on GitHub, preferably a web application so that you can interact with it using a web browser. We recommend Spring Petclinic which is a Java web application developed in Spring Boot, but use any other project you’re familiar with.
Fork the project into your personal GitHub account.
Write a pipeline for your CI/CD tool, to test, compile & package the application. Run the pipeline in the CI/CD tool.
Extend the pipeline to deploy it to a server (this is the “CD” part). You’ll need to research to learn how the application is deployed.

project 3

Provision a VM and deploy an application (e.g. WordPress) + a database backend.
Figure out how to provide database credentials to the application, through automation.
Deploy a second instance of the application, pointing to the same database. Think about high-availability, so if you’re using public cloud, then deploy on 2+ availability zones, or if you’re just working locally then use 2 x VMs.
Add a load balancer or reverse proxy to load-balance requests across the two instances, so that you have a single URL to access the application.

project 4

Deploy an application. You could use an application from the previous projects, or something else that you’re interested in.
Research open source monitoring tools, and pick one. Or use the one provided by your cloud provider (e.g. AWS CloudWatch).
Configure the application to expose some metrics, to show its health. Explore which metrics the application can expose; e.g. if it’s a web server, can you expose metrics like requests-per-second, or memory usage?
Extract or scrape the metrics into a monitoring tool.
Create a dashboard to display the metrics in real time.

project 5

Find a popular application on GitHub.
Create a pipeline that builds a container image for the application and pushes it to a registry (e.g. Docker Hub, Amazon ECR, self-hosted Nexus container registry)
Run the container image with a container engine - e.g. directly on a VM with Docker, or on a container platform like Amazon ECS, Kubernetes…

project 6

Pick a language (e.g. Go, Java, Python, .NET, etc.)
Write (yes, code!) a basic application that exposes a REST or GraphQL API (e.g. a microservice). You can use the app generator by provided by the framework, if there is one, to create the initial scaffolding. Then, define your API.
Create a build pipeline in your chosen CI/CD tool (e.g. Jenkins, GitLab, etc.) and add to the repository (pipeline-as-code)
Extend the pipeline to build a container and deploy to Kubernetes.